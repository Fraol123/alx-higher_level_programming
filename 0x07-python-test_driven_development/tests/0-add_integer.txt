
===========================
How to use 0-add_integer.py
===========================

This library only contains one function called ``add_integer(a, b=98)``.

How to use
==========

```add_integer(...)`` returns the addition of its two arguments. For numbers,
these is acchived by using the addittion ``+`` operator.

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, -4)
	-2

::

	>>> add_integer(3, 3)
	6

::

The function works with flots too.However, flots are casted to int before addition is performed

::
	>>> add_integer(2.0, 5.0)
	7

::

	>>> add_integer(2.2, 0.9)
	2

::

	>>> add_integer(-2.2, -0.9)
	-2

::

floating and int values can be combiend

	 >>> add_integer(5.5, -2)
	 3

::

The second value is optional by defualt it is 98

    >>> add_integer(2)
    100

Strings
=======

	>>> add_integer("holberton", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(5, "ALX")
	Traceback (most recent call last):
	TypeError: b must be an integer

::
	>>> add_integer("ALX")
	Traceback (most recent call last):
        TypeError: a must be an integer

::

	>>> add_integer(5.5, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

The function fails if infinity is given.

        >>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

the function with Nan given

    	>>> add_integer(2, float("NaN"))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::
